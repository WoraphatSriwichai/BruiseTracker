# -*- coding: utf-8 -*-
"""affineinvariant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UGTsfIobY4qpwaQeMUUivv9KuxaI4GYg
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np

def bz_exact_affine_geometric(image, n, k):

    return image * (n + k)

def bz_affineinvariant(image):

    I = image.astype(np.float64)  # Convert image to double (float64)

    # Apply affine-invariant transformations
    I1 = bz_exact_affine_geometric(I, 2, 0)
    I2 = bz_exact_affine_geometric(I, 2, 1)
    I3 = bz_exact_affine_geometric(I, 3, 0)
    I4 = bz_exact_affine_geometric(I, 3, 1)
    I5 = bz_exact_affine_geometric(I, 3, 2)
    I6 = bz_exact_affine_geometric(I, 4, 0)
    I7 = bz_exact_affine_geometric(I, 4, 1)

    # Store the features and names
    features = [I1, I2, I3, I4, I5, I6, I7]
    names = ['I1', 'I2', 'I3', 'I4', 'I5', 'I6', 'I7']

    return features, names



# We don't need this when we implement. it is just testing
if __name__ == "__main__":
    import cv2

    # Load image as grayscale
    img = cv2.imread("/content/drive/MyDrive/MM.JPG", cv2.IMREAD_GRAYSCALE)

    # Get features
    features, names = bz_affineinvariant(img)

    # Print feature names
    print("Extracted features:", names)


for name, feature in zip(names, features):
    print(f"{name}: {feature.shape}, min: {feature.min()}, max: {feature.max()}")

import matplotlib.pyplot as plt

for name, feature in zip(names, features):
    plt.imshow(feature, cmap="gray")
    plt.title(name)
    plt.show()